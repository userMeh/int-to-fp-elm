module Ex01 exposing (..)

import Browser
import Html as H exposing (Html)
import Html.Attributes as HA
import Html.Events as HE
import Http



-- Jusqu'Ã  maintenant, nos programmes Ã©taient plutÃ´t simples et ne dÃ©pendaient pas du monde extÃ©rieur.
--
-- En Elm, on considÃ¨re que le monde extÃ©rieur est "dangereux" : que se passe-t-il quand un appel rÃ©seau
-- Ã©choue ? Ou retourne un format inattendu ?
--
-- On dÃ©lÃ¨gue donc cette tÃ¢che au _runtime_ qui va nous protÃ©ger et nous forcer Ã  gÃ©rer ces cas d'erreur
-- (en Elm, les gestes barriÃ¨res, c'est tout le temps ðŸ˜· ).
--
-- Ainsi, pour effectuer un appel HTTP, on passe par le concept de "commande": notre fonction d'update
-- renvoie maintenant le nouveau modÃ¨le ET une commande Ã  exÃ©cuter (dans notre cas, une requÃªte HTTP).
--
-- Le runtime effectue l'appel, puis nous retourne le rÃ©sultat dans un message (dans notre cas `QuoteFetched`).


type alias Model =
    { quote : String }


initialModel : Model
initialModel =
    { quote = "Cliquez sur un bouton pour charger une citation ðŸ˜‰" }


type Msg
    = QuoteButtonClicked String
      -- L'appel HTTP peut Ã©chouer, c'est pourquoi on reÃ§oit un `Result` qui contient soit une erreur, soit une citation
    | QuoteFetched (Result Http.Error String)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        QuoteButtonClicked url ->
            ( { model | quote = "Chargement..." }, Http.get { expect = Http.expectString QuoteFetched } )

        QuoteFetched result ->
            case result of
                Err error ->
                    ( { model | quote = "Erreur! ðŸ˜±" }, Cmd.none )


view : Model -> Html Msg
view model =
    H.div []
        [ H.div []
            [ H.button [ HE.onClick (QuoteButtonClicked "/resources/quote-1.txt"), HA.style "margin-right" "1em" ] [ H.text "RÃ©cupÃ©rer la citation 1" ]
            , H.button [ HE.onClick (QuoteButtonClicked "/resources/quote-2.txt"), HA.style "margin-right" "1em" ] [ H.text "RÃ©cupÃ©rer la citation 2" ]
            , H.button [ HE.onClick (QuoteButtonClicked "/resources/quote-3.txt") ] [ H.text "RÃ©cupÃ©rer la citation 3" ]
            ]
        , H.pre
            [ HA.style "padding" "10px"
            , HA.style "border" "1px solid gray"
            , HA.style "max-width" "500px"
            , HA.style "white-space" "pre-wrap"
            , HA.style "margin" "10px"
            ]
            [ H.text model.quote ]
        ]


main : Program () Model Msg
main =
    Browser.element
        { init = \_ -> ( initialModel, Cmd.none )
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }
